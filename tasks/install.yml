---

- name: merge dependencies between defaults and custom
  ansible.builtin.set_fact:
    kimai_dependencies: "{{ kimai_dependencies + kimai_packages }}"
  when:
    - kimai_dependencies | count > 0 or
      kimai_packages | count > 0

- name: install dependencies
  ansible.builtin.package:
    name: "{{ kimai_dependencies }}"
    state: present

# get file or directory stats
- name: detect installed kimai
  ansible.builtin.stat:
    path: "{{ kimai_install_base_directory }}/kimai-{{ kimai_version }}/src/Kernel.php"
    get_checksum: false
    get_mime: false
    get_attributes: false
  register: __stat_present_kimai
  changed_when: not __stat_present_kimai.stat.exists

- name: detect type of {{ kimai_install_base_directory }}/kimai
  ansible.builtin.stat:
    path: "{{ kimai_install_base_directory }}/kimai"
    get_checksum: false
    # get_mime: false
    get_attributes: false
  register: __stat_share_kimai

# this should be a link!
- name: remove directory '{{ kimai_install_base_directory }}'
  ansible.builtin.file:
    state: absent
    path: "{{ kimai_install_base_directory }}/kimai"
  when:
    - __stat_share_kimai.stat is defined
    - __stat_share_kimai.stat.isdir | default('true')

- name: install kimai
  when:
    - not __stat_present_kimai.stat.exists
  block:
    - name: create remote temp directory
      ansible.builtin.file:
        path: "{{ kimai_remote_tmp_directory }}"
        state: directory
        mode: "0755"
      when:
        - not kimai_direct_download

    - name: deploy application archiv
      ansible.builtin.copy:
        src: "{{ kimai_local_tmp_directory }}/{{ kimai_release.file }}"
        dest: "{{ kimai_remote_tmp_directory }}/"
        mode: "0700"

    - name: create remote install directory
      ansible.builtin.file:
        state: directory
        path: "{{ kimai_install_base_directory }}"
        owner: "{{ kimai_owner }}"
        group: "{{ kimai_group }}"
        mode: "0755"

    - name: extract kimai archive
      ansible.builtin.unarchive:
        src: "{{ kimai_remote_tmp_directory }}/{{ kimai_version }}.tar.gz"
        dest: "{{ kimai_install_base_directory }}/"
        owner: "{{ kimai_owner }}"
        group: "{{ kimai_group }}"
        mode: "0755"
        remote_src: true
      notify:
        - restart php-fpm

  rescue:
    - name: remove installation directory
      ansible.builtin.file:
        state: absent
        path: "{{ kimai_install_base_directory }}/kimai-{{ kimai_version }}"

    - name: remove link to installation directory
      ansible.builtin.file:
        state: absent
        path: "{{ kimai_install_base_directory }}/kimai"

    - name: exit with fail
      ansible.builtin.fail:
        msg: "Error while installing of kimai!"

- name: create link for kimai-version {{ kimai_version }} to {{ kimai_install_base_directory }}/kimai
  ansible.builtin.file:
    src: '{{ kimai_install_base_directory }}/kimai-{{ kimai_version }}'
    dest: '{{ kimai_install_base_directory }}/kimai'
    owner: "{{ kimai_owner }}"
    group: "{{ kimai_group }}"
    mode: "0755"
    state: link
    force: true
  notify:
    - restart php-fpm

- name: detect entrypoints.json
  ansible.builtin.stat:
    path: "{{ kimai_install_base_directory }}/kimai/public/bundles/tabler/entrypoints.json"
    get_checksum: false
    # get_mime: false
    get_attributes: false
  register: __stat_kimai_entrypoints

- name: update composer
  community.general.composer:
    command: update
    working_dir: "{{ kimai_install_base_directory }}/kimai"
  when:
    - __stat_kimai_entrypoints is defined
    - not __stat_kimai_entrypoints.stat.exists | default('false')

- name: download and installs all libs and dependencies outlined in the {{ kimai_install_base_directory }}
  community.general.composer:
    command: install
    arguments: --optimize-autoloader --no-interaction
    working_dir: "{{ kimai_install_base_directory }}/kimai"
  when:
    - __stat_kimai_entrypoints is defined
    - not __stat_kimai_entrypoints.stat.exists | default('false')

- name: create custom fact file
  bodsch.core.facts:
    name: kimai
    facts:
      version: "{{ kimai_version }}"

- name: python support
  tags:
    - kimai_install
  when:
    - kimai_python_requirements is defined
    - kimai_python_requirements | length > 0
  block:
    - name: create pip requirements file
      bodsch.core.pip_requirements:
        name: kimai
        requirements: "{{ kimai_python_requirements }}"
      register: pip_requirements

    - name: fail if pip not installed
      ansible.builtin.fail:
        msg: python pip is not installed
      when:
        - not pip_requirements.pip.present

    - name: install kimai python packages  # noqa no-handler
      ansible.builtin.pip:
        state: present
        requirements: "{{ pip_requirements.requirements_file }}"
        extra_args: "{{ kimai_python_extra_args | default([]) | bodsch.core.python_extra_args(python_version=ansible_python.version) | default(omit) }}"
      register: pip_install
      ignore_errors: true
      no_log: true
      when:
        - pip_requirements.requirements_file is defined
        - pip_requirements.changed

    - name: first run is failed, try with build
      when:
        - pip_install is defined
        - pip_install.failed is defined
        - pip_install.failed
        - kimai_python_build_packages | default([]) | count > 0
      block:
        - name: install build essentials
          ansible.builtin.package:
            name: "{{ kimai_python_build_packages }}"
            state: present

        - name: ensure python bindings for kimai packages 2nd
          ansible.builtin.pip:
            state: present
            requirements: "{{ pip_requirements.requirements_file }}"
            extra_args: "{{ kimai_python_extra_args | default([]) | bodsch.core.python_extra_args(python_version=ansible_python.version) | default(omit) }}"

        - name: uninstall build essentials
          ansible.builtin.package:
            name: "{{ kimai_python_build_packages }}"
            state: absent

    - name: do facts module to get latest information
      ansible.builtin.setup:
  rescue:
    - name: remove python requirements file
      bodsch.core.pip_requirements:
        name: kimai
        requirements: "{{ kimai_python_requirements }}"
        state: absent

    - name: exit with fail
      ansible.builtin.fail:
        msg: Sorry, but a serious error occurred when installing the required Python packages.

...
